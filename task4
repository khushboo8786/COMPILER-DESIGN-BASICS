#include <iostream>
#include <string>
#include <cctype>
#include <stdexcept>

class ExpressionParser {
public:
    ExpressionParser(const std::string& expr) : expr(expr), pos(0) {}

    double parse() {
        double result = parseExpression();
        if (pos < expr.size()) throw std::runtime_error("Unexpected character at end.");
        return result;
    }

private:
    std::string expr;
    size_t pos;

    void skipWhitespace() {
        while (pos < expr.size() && isspace(expr[pos])) ++pos;
    }

    double parseExpression() {
        double result = parseTerm();
        while (true) {
            skipWhitespace();
            if (pos < expr.size() && (expr[pos] == '+' || expr[pos] == '-')) {
                char op = expr[pos++];
                double rhs = parseTerm();
                if (op == '+') result += rhs;
                else result -= rhs;
            } else break;
        }
        return result;
    }

    double parseTerm() {
        double result = parseFactor();
        while (true) {
            skipWhitespace();
            if (pos < expr.size() && (expr[pos] == '*' || expr[pos] == '/')) {
                char op = expr[pos++];
                double rhs = parseFactor();
                if (op == '*') result *= rhs;
                else {
                    if (rhs == 0.0) throw std::runtime_error("Division by zero.");
                    result /= rhs;
                }
            } else break;
        }
        return result;
    }

    double parseFactor() {
        skipWhitespace();
        if (pos < expr.size() && expr[pos] == '(') {
            ++pos; // skip '('
            double result = parseExpression();
            skipWhitespace();
            if (pos >= expr.size() || expr[pos] != ')') throw std::runtime_error("Missing closing parenthesis.");
            ++pos; // skip ')'
            return result;
        }
        return parseNumber();
    }

    double parseNumber() {
        skipWhitespace();
        size_t start = pos;
        while (pos < expr.size() && (isdigit(expr[pos]) || expr[pos] == '.')) ++pos;
        if (start == pos) throw std::runtime_error("Expected number.");
        return std::stod(expr.substr(start, pos - start));
    }
};

int main() {
    std::string input;
    std::cout << "Simple Arithmetic Expression Compiler\n";
    std::cout << "Enter an expression (or 'exit'):\n";
    while (true) {
        std::cout << "> ";
        std::getline(std::cin, input);
        if (input == "exit") break;
        try {
            ExpressionParser parser(input);
            double result = parser.parse();
            std::cout << "= " << result << "\n";
        } catch (const std::exception& ex) {
            std::cout << "Error: " << ex.what() << "\n";
        }
    }
    return 0;
}
